<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MagPie DevOps</title><link>https://www.davidsoff.nl/</link><description>Recent content on MagPie DevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>All Rights Reserved &lt;a href="https://github.com/DavidSoff">David Soff&lt;/a> 2019</copyright><lastBuildDate>Thu, 16 Jan 2020 14:46:37 +0100</lastBuildDate><atom:link href="https://www.davidsoff.nl/index.xml" rel="self" type="application/rss+xml"/><item><title>Machine Learning Best Practises</title><link>https://www.davidsoff.nl/blog/machine-learning-best-practises/</link><pubDate>Thu, 16 Jan 2020 14:46:37 +0100</pubDate><guid>https://www.davidsoff.nl/blog/machine-learning-best-practises/</guid><description>&lt;p>Assuming you have your cool new machine learned model, you will probably be wanting to show it off to your friends.
This post will lay out a couple of best practises around hosting and running your machine learned models&lt;/p></description><content>&lt;p>Assuming you have your cool new machine learned model, you will probably be wanting to show it off to your friends.
This post will lay out a couple of best practises around hosting and running your machine learned models&lt;/p>
&lt;h2 id="deploying">Deploying&lt;/h2>
&lt;p>To deploy your model you will have to export it, there are multiple file types available for this so pick the one your programming language supports.&lt;/p>
&lt;p>For python some common file formats are:&lt;/p>
&lt;ul>
&lt;li>Pickle&lt;/li>
&lt;li>joblib&lt;/li>
&lt;/ul>
&lt;p>It is also possible to export models trained using tensorflow to a tensorflow specific file format.
Tensorflow is also supported by R&lt;/p>
&lt;h3 id="serving">Serving&lt;/h3>
&lt;p>There are many solutions for serving a model. Most solutions do follow the principle of exposing an api and converting the request data to the format expected by the model. Some frameworks have more built in features so less code is needed to get an application which can serve predictions.&lt;/p>
&lt;h2 id="retraining">Retraining&lt;/h2>
&lt;p>Your first model was trained using a training set. This training set is a snapshot of the world (or the piece you are evaluating atleast) at a specific moment in time. Since change is inevitable, your trainingdata will become outdated and will need to be refreshed. This also means your model is out of date. This phenomenon is called &lt;em>model drift&lt;/em>.&lt;/p>
&lt;p>There are multiple ways of detecting model drift and there is no one-size-fits all, a few ways of checking for model drift are:&lt;/p>
&lt;ul>
&lt;li>Examining the feature distributions of training and live data&lt;/li>
&lt;li>Examining the correlations between features&lt;/li>
&lt;li>Examining the target distributions&lt;/li>
&lt;/ul>
&lt;p>A more thorough explanation on what this means can be found &lt;a href="https://mlinproduction.com/model-retraining/">here&lt;/a>&lt;/p>
&lt;h2 id="monitoring">Monitoring&lt;/h2>
&lt;p>Once your model is in production you will want to keet rack of the folowing metrics next to your normal monitoring of CPU, memory, latency, throughput, etc&lt;/p>
&lt;h3 id="age-of-the-model">Age of the model&lt;/h3>
&lt;p>The model will become less accurate if you do not retrain it regularly using fresh data&lt;/p>
&lt;h3 id="accuracy-of-the-model">Accuracy of the model&lt;/h3>
&lt;p>Keep tabs on the accuracy of the model so that you can detect sudden changes. Big changes may be an indication of a problem.
Also remember to validate your accuracy using human feedback.&lt;/p>
&lt;h3 id="output-distribution">Output distribution&lt;/h3>
&lt;p>Keep tabs on the distribution of your predictions. Sudden changes in the distribution can be an indication of bugs or problems.
Although this can also be caused by changes in the input conditions, it is certainly worth investigating the cause of the sudden change.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;p>&lt;a href="https://blog.dominodatalab.com/on-being-model-driven-metrics-and-monitoring/">https://blog.dominodatalab.com/on-being-model-driven-metrics-and-monitoring/&lt;/a>
&lt;a href="https://mlinproduction.com/model-retraining/">https://mlinproduction.com/model-retraining/&lt;/a>&lt;/p></content></item><item><title>Intro to DNS</title><link>https://www.davidsoff.nl/presentation/dns/</link><pubDate>Mon, 11 Nov 2019 12:55:23 +0100</pubDate><guid>https://www.davidsoff.nl/presentation/dns/</guid><description>A short introduction into the innerworkings of DNS</description><content>&lt;p>layout: true&lt;/p>
&lt;p>class: center, middle&lt;/p>
&lt;hr>
&lt;h1 id="intro-to-dns">Intro to DNS&lt;/h1>
&lt;p>By: David Soff (@SoffDavid)&lt;/p>
&lt;hr>
&lt;h1 id="dns">DNS&lt;/h1>
&lt;hr>
&lt;h1 id="domain-name-system">&lt;strong>D&lt;/strong>omain &lt;strong>N&lt;/strong>ame &lt;strong>S&lt;/strong>ystem&lt;/h1>
&lt;hr>
&lt;h1 id="basically-the-phonebook-of-the-internet">Basically the phonebook of the internet&lt;/h1>
&lt;hr>
&lt;h1 id="how-does-it-work">How does it work?&lt;/h1>
&lt;p>&amp;ndash;&lt;/p>
&lt;ol>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A browser or device called the &lt;em>DNS client&lt;/em> issues a &lt;em>DNS Request&lt;/em>. For example: &lt;em>google.com&lt;/em>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>The request is received by the &lt;em>DNS resolver&lt;/em>. The resolver starts to look for a DNS server that holds the ip address for the domain&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>The resolver starts at the internets &lt;em>Root DNS server&lt;/em> to find the &lt;strong>T&lt;/strong>op &lt;strong>L&lt;/strong>evel &lt;strong>D&lt;/strong>omain* server.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>The resolver then goes to the server responsible for the &lt;em>domain&lt;/em>. If there are &lt;em>subdomains&lt;/em> managed by a different server, the resolver wil go to those servers.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Once the resolver gets to the &lt;em>authoritative DNS server&lt;/em> for the specific &lt;em>domain&lt;/em>, that DNS server will return de requested data to the resolver. The request is now resolved.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>The client can now connect to the correct server with the returned IP address.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h1 id="now-some-terms">Now some terms:&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>DNS client&lt;/strong>: Any device making a DNS request&lt;/li>
&lt;li>&lt;strong>DNS resolver&lt;/strong>: The program or server the DNS client is sending the DNS request to.&lt;/li>
&lt;li>&lt;strong>Root DNS server&lt;/strong>: These servers know where all the DNS servers for the Top Level Domains are.&lt;/li>
&lt;li>&lt;strong>Authoritative DNS server&lt;/strong>: These servers are the one and only source where you can get the address information for a specific domain.&lt;/li>
&lt;li>&lt;strong>DNS request&lt;/strong>: A request for the DNS information associated with a particular domain&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="other-interesting-things">Other interesting things&lt;/h1>
&lt;ul>
&lt;li>DNS resolvers may cache the responses they get for a request.&lt;/li>
&lt;li>A response contains a &lt;strong>T&lt;/strong>ime-&lt;strong>T&lt;/strong>o-&lt;strong>L&lt;/strong>ive field which is meant to be an indicator of how long the DNS record should be kept in the cache.&lt;/li>
&lt;li>A resolver does not have to respect the TTL field of a DNS response. for example: Some mobile phone plans cache responses for at least 2 hours. Lower values for the TTL are not respected.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="thank-you">Thank you&lt;/h1>
&lt;hr>
&lt;h1 id="sources-and-more-information">Sources and more information:&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://ns1.com/resources/dns-protocol">https://ns1.com/resources/dns-protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://umbrella.cisco.com/blog/2014/07/16/difference-authoritative-recursive-dns-nameservers/">https://umbrella.cisco.com/blog/2014/07/16/difference-authoritative-recursive-dns-nameservers/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudflare.com/learning/dns/what-is-dns/">https://www.cloudflare.com/learning/dns/what-is-dns/&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Release it!</title><link>https://www.davidsoff.nl/presentation/release-it/</link><pubDate>Fri, 01 Nov 2019 15:42:04 +0100</pubDate><guid>https://www.davidsoff.nl/presentation/release-it/</guid><description>A talk about building software that can survive production.</description><content>&lt;p>layout: true&lt;/p>
&lt;p>class: center, middle&lt;/p>
&lt;hr>
&lt;h1 id="release-it">Release it!&lt;/h1>
&lt;h2 id="production-ready-systems">Production ready systems&lt;/h2>
&lt;p>By: David Soff&lt;/p>
&lt;p>@SoffDavid&lt;/p>
&lt;hr>
&lt;h1 id="software-is-only-useful-in-production">Software is only useful in production.&lt;/h1>
&lt;p>But most software is not necceseraly written with production in mind.&lt;/p>
&lt;p>???&lt;/p>
&lt;p>Software only delivers value in production.&lt;/p>
&lt;hr>
&lt;h1 id="does-passing-qa-mean-being-ready-for-production">Does passing QA mean being ready for production?&lt;/h1>
&lt;hr>
&lt;p>&lt;img src="passed-qa.jpg" alt="passed-qa.jpg">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="users.jpg" alt="users">&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.
.origin[Rick Cook]&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h1 id="failure-is-expensive">Failure is expensive.&lt;/h1>
&lt;p>???&lt;/p>
&lt;p>A bug in a trading system can very quickly lose a company millions.&lt;/p>
&lt;p>A wrong admin input can screw up the DNS and make a website unreachable.&lt;/p>
&lt;p>A single broken request handler can bring down a server.&lt;/p>
&lt;hr>
&lt;h2 id="failure-is-expensive-expected">Failure is &lt;del>expensive&lt;/del> expected.&lt;/h2>
&lt;hr>
&lt;h1 id="the-bug-that-brought-down-an-airline">The bug that brought down an airline&lt;/h1>
&lt;p>???&lt;/p>
&lt;p>A bug in the Oracle database driver caused the check-in kiosks to stop working
This bug made it so that connections to the database where not correctly closed after a failover.
This in turn caused the kiosk servers to run out of resources
A reboot of the affected applications fixed the problems&lt;/p>
&lt;hr>
&lt;h1 id="so-how-to-prevent-the-next-outage">So how to prevent the next outage?&lt;/h1>
&lt;blockquote>
&lt;p>Bugs cannot be eliminated, so they must be survived instead.
.origin[Michael T. Nygard]&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h1 id="goal">Goal&lt;/h1>
&lt;h2 id="prevent-bugs-from-causing-a-chain-of-failures">Prevent bugs from causing a chain of failures.&lt;/h2>
&lt;hr>
&lt;p>layout: true
class: left, middle&lt;/p>
&lt;hr>
&lt;h1 id="defining-stability">Defining Stability&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>Transaction&lt;/strong>: Abstract unit of work processed by the system.&lt;/li>
&lt;li>&lt;strong>System&lt;/strong>: Everything needed to process a transaction.&lt;/li>
&lt;li>&lt;strong>Impulse&lt;/strong>: A rapid shock to the system.&lt;/li>
&lt;li>&lt;strong>Stress&lt;/strong>: A force applied to the system over a longer period of time.&lt;/li>
&lt;li>&lt;strong>Strain&lt;/strong>: A change in the &amp;ldquo;shape&amp;rdquo; of the system caused by stress.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>layout: true
class: center, middle&lt;/p>
&lt;hr>
&lt;h1 id="both-impulses-and-stress-can-cause-excessive-strain">Both &lt;em>Impulses&lt;/em> and &lt;em>Stress&lt;/em> can cause excessive &lt;em>Strain&lt;/em>&lt;/h1>
&lt;hr>
&lt;h1 id="impulse">Impulse&lt;/h1>
&lt;p>&lt;img src="impulse.gif" alt="impulse">&lt;/p>
&lt;hr>
&lt;h1 id="stress">Stress&lt;/h1>
&lt;p>&lt;img src="stress.gif" alt="stress">&lt;/p>
&lt;hr>
&lt;h1 id="stability-antipatterns">Stability antipatterns&lt;/h1>
&lt;ul>
&lt;li>Integration points&lt;/li>
&lt;li>Chain reactions&lt;/li>
&lt;li>Cascading failures&lt;/li>
&lt;li>Users&lt;/li>
&lt;li>Blocked threads&lt;/li>
&lt;li>Self-denial attacks&lt;/li>
&lt;li>Scaling effects&lt;/li>
&lt;li>Unbalanced capacities&lt;/li>
&lt;li>Dogpile&lt;/li>
&lt;li>Force multiplier&lt;/li>
&lt;li>Slow responses&lt;/li>
&lt;li>Unbounded result sets&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="stability-antipatterns-1">Stability antipatterns&lt;/h1>
&lt;ul>
&lt;li>Integration points&lt;/li>
&lt;li>&lt;strong>Chain reactions&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Cascading failures&lt;/strong>&lt;/li>
&lt;li>Users&lt;/li>
&lt;li>Blocked threads&lt;/li>
&lt;li>Self-denial attacks&lt;/li>
&lt;li>&lt;strong>Scaling effects&lt;/strong>&lt;/li>
&lt;li>Unbalanced capacities&lt;/li>
&lt;li>Dogpile&lt;/li>
&lt;li>&lt;strong>Force multiplier&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Slow responses&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Unbounded result sets&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>???&lt;/p>
&lt;p>I will be talking about these specific antipatterns.&lt;/p>
&lt;hr>
&lt;h1 id="chain-reactions">Chain reactions&lt;/h1>
&lt;p>???&lt;/p>
&lt;p>These happen in horizontally scaled apps. Once one of the nodes in the group crashes, the loadbalancer will distribute the load of that node to the other healthy nodes which as a result might also start failing. worst case this keeps happening untill all nodes are down and your service is unreachable.&lt;/p>
&lt;p>IT may be the beginning of a cascading failure&lt;/p>
&lt;hr>
&lt;h1 id="cascading-failures">Cascading failures&lt;/h1>
&lt;p>???
These happen when an outage in one service also causes failures in other upstream and downstream services. This may be because of poorly isolated calls to the broken service. These can usually be prevented by employing Circuit-Breakers and Timeouts&lt;/p>
&lt;hr>
&lt;h1 id="cascading-failures-1">Cascading failures&lt;/h1>
&lt;p>&lt;img src="graphs/cascade1.png" alt="cascade1">&lt;/p>
&lt;hr>
&lt;h1 id="cascading-failures-2">Cascading failures&lt;/h1>
&lt;p>&lt;img src="graphs/cascade2.png" alt="cascade2">&lt;/p>
&lt;hr>
&lt;h1 id="cascading-failures-3">Cascading failures&lt;/h1>
&lt;p>&lt;img src="graphs/cascade3.png" alt="cascade3">&lt;/p>
&lt;hr>
&lt;h1 id="scaling-effects">Scaling effects&lt;/h1>
&lt;p>???
Dont assume that the load between environments is the same.&lt;/p>
&lt;p>More something to keep in mind, ACC does not have the same size as PROD.&lt;/p>
&lt;p>More clients can mean more trouble, a backend server might be able to handle ten frontend services calling it, but it may crash when it is a hundred calling.&lt;/p>
&lt;hr>
&lt;h1 id="force-multiplier">Force multiplier&lt;/h1>
&lt;p>&lt;code>rm -rf /&lt;/code>&lt;/p>
&lt;p>???
Automation amplifying adverse effects because they can react very stupidly, very very quickly.&lt;/p>
&lt;p>Fix this by defining &amp;ldquo;safe&amp;rdquo;, and &amp;ldquo;unsafe&amp;rdquo; actions. Also add a goveror functionality which ensures automation cannot break loose.&lt;/p>
&lt;hr>
&lt;h1 id="slow-responses">Slow responses&lt;/h1>
&lt;p>&lt;img src="refresh.gif" alt="refresh">&lt;/p>
&lt;p>???
Slow responses can trigger cascading failures. They can also cause more load caused by users hitting the reload button.
Failing fast mitigated this problem by not having upstream systems wait for a response.&lt;/p>
&lt;hr>
&lt;h1 id="unbounded-result-sets">Unbounded result sets&lt;/h1>
&lt;p>&lt;img src="overload.gif" alt="overload">&lt;/p>
&lt;p>???
Title kinda explains this one.
If you call a service and it returns a huge list of data, you will have to be able to deal with that.
Also if you are writing queries, always add a limit clause otherwise you leave yourself open to sudden data growth issues.&lt;/p>
&lt;hr>
&lt;h1 id="stability-patterns">Stability patterns&lt;/h1>
&lt;ul>
&lt;li>Timeouts&lt;/li>
&lt;li>Circuit breakers&lt;/li>
&lt;li>Bulkheads&lt;/li>
&lt;li>Steady state&lt;/li>
&lt;li>Fail fast&lt;/li>
&lt;li>Let it crash&lt;/li>
&lt;li>Handshaking&lt;/li>
&lt;li>Test harnesses&lt;/li>
&lt;li>Decoupling middleware&lt;/li>
&lt;li>Shed load&lt;/li>
&lt;li>Create back pressure&lt;/li>
&lt;li>Govenor&lt;/li>
&lt;/ul>
&lt;p>???
Let's get away from these dark patterns (wich pretty much every system has some of) and have a look at some stability patterns.
Expect failure, use these patterns to reduce impact.&lt;/p>
&lt;hr>
&lt;h1 id="stability-patterns-1">Stability patterns&lt;/h1>
&lt;ul>
&lt;li>&lt;strong>Timeouts&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Circuit breakers&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Bulkheads&lt;/strong>&lt;/li>
&lt;li>Steady state&lt;/li>
&lt;li>&lt;strong>Fail fast&lt;/strong>&lt;/li>
&lt;li>Let it crash&lt;/li>
&lt;li>Handshaking&lt;/li>
&lt;li>&lt;strong>Test harnesses&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Decoupling middleware&lt;/strong>&lt;/li>
&lt;li>Shed load&lt;/li>
&lt;li>&lt;strong>Create back pressure&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Govenor&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="timeouts">Timeouts&lt;/h1>
&lt;p>&lt;img src="waiting.gif" alt="waiting">&lt;/p>
&lt;p>???
Can be used for ensuring outgoing calls don't keep the system hanging forever. Think very carefully about the length of a timeout. Does is make sense to wait 60 seconds for a reply from a backend service before rendering the webpage a user requested?&lt;/p>
&lt;hr>
&lt;h1 id="circuit-breakers">Circuit breakers&lt;/h1>
&lt;p>&lt;img src="circuit_breaker_state_diagram.png" alt="circuit_breaker_state_diagram">&lt;/p>
&lt;p>???&lt;/p>
&lt;ul>
&lt;li>Best used in conjunction with timeouts.&lt;/li>
&lt;li>They trigger on number of errors.&lt;/li>
&lt;li>A tripped circuitbreaker is bad and should be alerted on.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="bulkheads">Bulkheads&lt;/h1>
&lt;p>&lt;img src="without-bulkhead.svg" alt="without-bulkhead">&lt;/p>
&lt;hr>
&lt;h1 id="bulkheads-1">Bulkheads&lt;/h1>
&lt;p>&lt;img src="with-bulkhead.svg" alt="with-bulkhead">
???&lt;/p>
&lt;ul>
&lt;li>Used to contain failures/ reduce the balst radius, just like the bulkheads in a ship are designed to ensure a single leak does not sink the ship.&lt;/li>
&lt;li>Partition single points of failure so that an issue with one of the partitions, doesn't bring down all dependent services.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="fail-fast">Fail fast&lt;/h1>
&lt;p>???&lt;/p>
&lt;ul>
&lt;li>Fail as fast as possible by checking your dependencies before doing big computations.&lt;/li>
&lt;li>Don't wait for resources to become available. the upstream system should be handling failure responses.&lt;/li>
&lt;/ul>
&lt;p>Example:&lt;/p>
&lt;p>A print shop needs the fonts to be attached to a job otherwise the printer will pront a full black page.
The printer should therefore verify that the fonts are correctly attached before starting the full print run. Otherwise it should fail with a descriptive error message.&lt;/p>
&lt;hr>
&lt;h1 id="test-harnesses">Test harnesses&lt;/h1>
&lt;h4 id="aka-evil-twin-service">(AKA evil-twin service)&lt;/h4>
&lt;p>???&lt;/p>
&lt;p>Basically a mock service which will try to simulate all different failure modes, this includes but is not limited to:&lt;/p>
&lt;ul>
&lt;li>slow responses&lt;/li>
&lt;li>slow connections&lt;/li>
&lt;li>wrong return types&lt;/li>
&lt;li>refuse all credentials&lt;/li>
&lt;li>etc&lt;/li>
&lt;/ul>
&lt;p>It will try to make the system under test hurt.&lt;/p>
&lt;hr>
&lt;h1 id="decoupling-middleware">Decoupling middleware&lt;/h1>
&lt;p>???&lt;/p>
&lt;p>Decouple services by using async communication.&lt;/p>
&lt;hr>
&lt;h1 id="create-back-pressure">Create back pressure&lt;/h1>
&lt;p>???
Mostly important for systems where work is pushed through the system.&lt;/p>
&lt;p>Don't push more work onto a worker than it can process and let the worker communicate this back to the producer.&lt;/p>
&lt;p>Block new work until it can be processed again. producer should notice and stop trying to send new work untill there is capacity again.&lt;/p>
&lt;hr>
&lt;h1 id="governor">Governor&lt;/h1>
&lt;p>&lt;img src="governor.gif" alt="governor">&lt;/p>
&lt;p>???&lt;/p>
&lt;p>Limit the speed at which &amp;ldquo;unsafe&amp;rdquo; actions can be performed e.g. shutting down servers or deleting data.&lt;/p>
&lt;hr>
&lt;h1 id="lessons">Lessons&lt;/h1>
&lt;p>&amp;ndash;&lt;/p>
&lt;ul>
&lt;li>Production is hard.&lt;/li>
&lt;/ul>
&lt;p>&amp;ndash;&lt;/p>
&lt;ul>
&lt;li>Your software should be cynical.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="thank-you">Thank you&lt;/h1></content></item><item><title>Consumer Driven Contracts</title><link>https://www.davidsoff.nl/blog/consumer-driven-contracts/</link><pubDate>Thu, 15 Mar 2018 16:12:32 +0100</pubDate><guid>https://www.davidsoff.nl/blog/consumer-driven-contracts/</guid><description>&lt;p>This post groups all sources I have found useful when preparing my presentation on Consumer Driven Contract.&lt;/p></description><content>&lt;p>This post groups all sources I have found useful when preparing my presentation on Consumer Driven Contract.&lt;/p>
&lt;h2 id="generic-sources">Generic sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam">Integrated Tests Are A Scam&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/articles/microservice-testing/#testing-contract-introduction">microservice testing slides 18-19&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/articles/consumerDrivenContracts.html">Consumer-Driven Contracts: A Service Evolution Pattern&lt;/a> tough read, but the end really helped me clear up some things.&lt;/li>
&lt;li>&lt;a href="https://thoughtworks.github.io/pacto/patterns/cdc/">Pact explanation of Consumer Driven Contracts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.thoughtworks.com/radar/techniques/consumer-driven-contract-testing">Thoughtworks technology radar&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reflectoring.io/7-reasons-for-consumer-driven-contracts/">7 Reasons to Choose Consumer-Driven Contract Tests Over End-to-End Tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rea.tech/enter-the-pact-matrix-or-how-to-decouple-the-release-cycles-of-your-microservices/">Intro to the pact matrix&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="pact">Pact&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.risingstack.com/consumer-driven-contract-testing-with-pact/">Consumer Driven Contract Testing with Pact&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.risingstack.com/advanced-contract-testing-pact-verification-with-pattern-matching/">Advanced Contract Testing - Pact Verification with Pattern Matching&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pact-foundation/pact_broker">Pact Broker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pact-foundation/pact-ruby-standalone/releases">Pact standalone (especially the can-i-deploy section)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pact-foundation/pact-net">Pact implementation for DotNet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pact-foundation/pact-js/tree/master/examples/e2e">Pact JS Demo&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Docker 101</title><link>https://www.davidsoff.nl/presentation/docker-101/</link><pubDate>Wed, 30 Aug 2017 16:12:32 +0100</pubDate><guid>https://www.davidsoff.nl/presentation/docker-101/</guid><description>An introductory look at Docker</description><content>&lt;p>layout: true&lt;/p>
&lt;p>class: center, middle&lt;/p>
&lt;hr>
&lt;h2 id="docker-101">Docker 101&lt;/h2>
&lt;p>By David Soff&lt;/p>
&lt;hr>
&lt;h2 id="before-i-start">Before I start:&lt;/h2>
&lt;p>please clone &lt;a href="https://github.com/Davidsoff/docker101">https://github.com/Davidsoff/docker101&lt;/a> for the hands-on part&lt;/p>
&lt;hr>
&lt;h2 id="what-is-docker">What is Docker?&lt;/h2>
&lt;ul>
&lt;li>Lightweight containers&lt;/li>
&lt;li>Only share the kernel of the host&lt;/li>
&lt;li>Smaller and quicker to start than VMs&lt;/li>
&lt;li>typically only runs a single proccess&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="docker-vs-vm">Docker vs VM&lt;/h2>
&lt;p>&lt;img src="docker-vm-container.png" alt="vs vm">&lt;/p>
&lt;hr>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>&lt;img src="architecture.svg" alt="architecture">&lt;/p>
&lt;hr>
&lt;h2 id="how-to-use-docker">How to use Docker?&lt;/h2>
&lt;p>Download it from &lt;a href="https://www.docker.com/community-edition">docker.com&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="building-images-pt-1">building images pt. 1&lt;/h2>
&lt;p>create a build description in a Dockerfile&lt;/p>
&lt;hr>
&lt;h2 id="building-images-pt-2">building images pt. 2&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker build -t my-image .
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="running-images">running images&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run --name my-container -p 8080:80 my-image
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="viewing-containers">viewing containers&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker ps
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="stopping-images">stopping images&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker kill my-container
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="hands-on-time">Hands-on time!&lt;/h2>
&lt;hr>
&lt;h2 id="static-application">Static application&lt;/h2>
&lt;p>simple serving of html files&lt;/p>
&lt;hr>
&lt;h2 id="dynamic-application">Dynamic application&lt;/h2>
&lt;p>simple customised Hello World spring boot application&lt;/p>
&lt;hr>
&lt;h2 id="multi-container-setups">Multi container setups&lt;/h2>
&lt;ul>
&lt;li>Applications need storage&lt;/li>
&lt;li>One process per container&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="docker-compose">Docker Compose&lt;/h2>
&lt;ul>
&lt;li>lightweight container orchestration&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="multistage-builds">Multistage builds&lt;/h2>
&lt;ul>
&lt;li>New feature in Docker 17.05&lt;/li>
&lt;li>Separates build environment and runtime environment&lt;/li>
&lt;li>Optimised containers for each role&lt;/li>
&lt;li>Allows for very small containers&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="questions">Questions?&lt;/h2>
&lt;hr>
&lt;h2 id="thank-you">Thank you!&lt;/h2></content></item></channel></rss>